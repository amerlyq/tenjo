#!/usr/bin/env zsh
#%SUMMARY: create tasks in Jira from cmdline TEMP: keep in tenjo repo
#%USAGE: $ ./$0 [-x] -l labA,labB -e 8h -- summary... [<<< $'description\n- item1\n- ...']
set -o errexit -o noclobber -o noglob -o nounset -o pipefail
setopt brace_expand

# BAD:FIND:CHECK: currentUser() don't work here
## MAYBE: directly use python API
# 6. API Documentation — jira-python 2.0.1rc3.dev49+g5c27f6d documentation ⌇⡞⡆⢨⠛
#   https://jira.readthedocs.io/en/master/api.html

typeset -A opts

## ATT: must not define them BAD: cmdline flags don't add any value
# opts[--dryrun]=
# opts[--execute]=
# opts[--verbose]=

## DFL
opts[--host]=${JIRA_HOST:-}
opts[--user]=${JIRA_USER:-$USER}
opts[--project]=${JIRA_PROJ:-}

## TASK
opts[--issuetype]=Task
# opts[prio]='Critical'
opts[--summary]=
opts[--description]=   # OR: TBD
opts[--estimate]=  # OR: 8h  # WARN: it seems we can't change it afterwards

opts[--prefix]='[Arch]'
opts[--labels]=  # NOTE: comma-separated list


# WARN: use "-l aaa -l ,bbb" to append labels -- they are simply concatenated
# ALT:(-a opts): use getopts for post-processing
typeset -a -- spec=(
  'v=-verbose'       '-verbose'
  'n=-dryrun'        '-dryrun'
  'x=-execute'       '-execute'

  'H:=-host'         '-host:'
  'u:=-user'         '-user:'
  'j:=-project'      '-project:'

  't::=-issuetype'   '-issuetype::'
  's::=-summary'     '-summary::'
  'd::=-description' '-description::'
  'e::=-estimate'    '-estimate::'
  'p::=-prefix'      '-prefix::'

  'l+:=-labels'      '-labels+:'
)
zparseopts -A opts -D -F -K -M -- $spec


# NOTE: append "/dev/stdin" to cmdline "--data" to form description
#   [_] ALT:FIXME: don't touch "stdin" unless you have "--data=-"
[[ -t 0 ]] || opts[--description]+=${opts[--description]:+$'\n'}$(</dev/stdin)

# NOTE: open editor if no supplied description
#   [_] FIXME: don't open editor if supplied empty "--data=''"
#   [_] FIXME: don't open editor if used <<< ""
((${opts[--description]:+1})) || opts[--description]=$(vipe </dev/null)

# NOTE: jira needs '\r\n' -- otherwise whole text is placed on single line
opts[--description]=${${opts[--description]//\\/\\\\}//$'\n'/\\r\\n}

((${opts[--summary]:+1})) || opts[--summary]="$opts[--prefix] ${*:?Need summary}"


args=( --ssl-reqd )

# DEBUG: --verbose | -D/dev/stderr
((${+opts[--verbose]})) && args+=( --verbose ) || args+=( --silent --show-error )

domain=${${opts[--host]#*//}%%/*}
psid=work/$domain/$opts[--user]
psfile=${PASSWORD_STORE_DIR:=~/.password-store}/$psid.gpg
cookie=${TMPDIR:-/tmp}/$domain.cookie
output=${TMPDIR:-/tmp}/$domain.output
auth=

[[ -f $psfile ]] && auth=$({
  printf '%s:' $opts[--user]
  pass show -- $psid | head -n1 | head -c -1
} | base64) || true

# NOTE:(fallback): login manually
#   => if you don't have nor pass(1), nor stored password OR some errors occured
[[ ${auth-} ]] || args+=( --user "$opts[--user]" )

## WARN: must manually delete cookie when expired
# [[ -s $cookie ]] && args+=( --cookie $cookie ) || args+=( --cookie-jar $cookie )
# GET: args+=( --get --data 'os_authType=cookie' )

# BUG:(zsh/2019-06-20): bash syntax "exec {fdh}<<EOT" is not supported
#   * https://inbox.vuxu.org/zsh-workers/16fed15234db4cd724a977063f425d105600250c.camel@ntlworld.com/T/#rb7ee4cd00e3dc39fb3da927e0e263e757825d950
#   * http://www.zsh.org/mla/workers/2017/msg00381.html
#   BAD:(temp-file & cat): exec {fd}<=(<<EOT ...  EOT )
#   HACK:(anonymous):  () { exec {fd}<$1 } =(); ls -l /proc/$$/fd/$fd
# CHECK:BAD: [[ -t 0 ]] maybe "exec <<EOT {fdh}>&0" reopens "stdin"
integer fdh
exec <<HEADERS {fdh}>&0
Content-Type: application/json
X-Atlassian-Token: no-check
${auth:+Authorization: Basic $auth}
HEADERS
# cat /dev/fd/$fdh  # DEBUG=heredoc


## BAD: non-JSON output will be hidden by "jq"
# (($+commands[jq])) \
#   && function pretty { jq . } \
#   || function pretty { </dev/stdin }
function pretty { </dev/stdin }


integer fdo
exec {fdo}> >(pretty)

args+=(
  --header "@/dev/fd/$fdh"
  --output "/dev/fd/$fdo"
  --write-out '%{http_code}\n'
)


## GET projects list
# args+=( --get --url "$opts[--host]/rest/api/latest/project" )
## GET issue
# args+=( --get --url "$opts[--host]/rest/api/latest/issue/${opts[--project]}-34567" )
## GET timesheet
# args+=( --get --url "$opts[--host]/rest/timesheet-gadget/latest/raw-timesheet.json" )

## TODO: sequence for @/wiw/jira/jql
#  ALSO: @/jira-cli/jira-cli.d/worklog-{add,get}
## TODO: "Creating a sub-task" https://developer.atlassian.com/server/jira/platform/jira-rest-api-examples/

## TODO: add comment IDEA: create follow-up ticket first and insert link to follow-up ticket into previous (closing) one
# ... maybe really use python-api for jira ?

## GET issue types FAIL: 404
# args+=( --get --url "$opts[--host]/rest/api/latest/issue/createmeta/$opts[--project]/issuetypes/{issueTypeId}" )
# args+=( --get --url "$opts[--host]/rest/api/latest/issue/createmeta/$opts[--project]/issuetypes" )

## POST new issue
#  => Response { "id":"39000", "key":"TEST-101", "self":"http://localhost:8080/rest/api/2/issue/39000" }
# FIND: ?? How to remove "Start Date" ???
# FIXME? [[ ${opts[--description]:+x} ]] && exec <<< "${opts[--description]}" {fdi}>&0
integer fdi
exec <<JSON {fdi}>&0
{ "fields": { "project": { "key": "${opts[--project]:?}" }
  , "issuetype": { "name": "${opts[--issuetype]:?}" }
  , "assignee": { "name": "${opts[--user]:?}" }
  , "labels": ["${(j:", ":)${(s:,:)opts[--labels]:?}}"]
  , "summary": "${opts[--summary]:?}"
  , "description": "$opts[--description]"
  , "timetracking": { "originalEstimate": "${opts[--estimate]:?}", "remainingEstimate": "${opts[--estimate]:?}" }
} }
JSON
# </dev/fd/$fdi  # DEBUG=

if ((!${+opts[--execute]})); then
  jq . </dev/fd/$fdi
  exit
fi

args+=( -X POST --data @/dev/fd/$fdi --url "$opts[--host]/rest/api/latest/issue" )

# ALT: dryrun=${+fopts[(r)(-n|--dry-run)]}
#   OR: annexonly=$(( ! ${+fopts[(r)(-a|--allow-non-annex)]} ))
((${+opts[--dryrun]})) && function curl {
  {
    print OPTS
    print -lraNC2 -- "${(@kvq-)opts//$'\n'/\n}" | sort -z | tr \\0 \\n | nl -s' ' -w4
    print CURL_ARGS
    nl -s' ' -w4 <<< "${(pj:\n-:)${(s: -:)args[*]}}"
    print CURL_HEADERS
    nl -s' ' -w3 </dev/fd/$fdh
    print -rn CURL_JSON=
    jq . </dev/fd/$fdi
  } > /dev/fd/$fdo
  print 200
}

code=$(curl $args)

((${+opts[--dryrun]})) && </dev/fd/$fdo

case $code      #%VIZ: <error codes>
in 200) exit 0  #% 0 = success
;; 401) exit 3  #% 3 = authorization
;; 403) exit 3  #% 3 = authorization
;;   *) exit 1  #% 1 = other HTTP error
esac            #% 2 = inner error
